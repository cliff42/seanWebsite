{"remainingRequest":"/Users/chris/Documents/GitHub/seanWebsite/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chris/Documents/GitHub/seanWebsite/app/src/views/Bots.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/chris/Documents/GitHub/seanWebsite/app/src/views/Bots.vue","mtime":1611907808290},{"path":"/Users/chris/Documents/GitHub/seanWebsite/app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Documents/GitHub/seanWebsite/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/chris/Documents/GitHub/seanWebsite/app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/chris/Documents/GitHub/seanWebsite/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chris/Documents/GitHub/seanWebsite/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJvdHMgaDIgewogIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgouYm90cyB7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIHBhZGRpbmc6IDUwcHg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKfQoKLnRhYmxlIHsKICB3aWR0aDogMTAwMHB4OwogIG1hcmdpbi10b3A6IDEwcHg7Cn0KCi5hY3Rpb25zLWNvbCB7CiAgd2lkdGg6IDEwJTsKfQoKLmFjdGlvbkJ1dHRvbiB7CiAgbWFyZ2luOiA0cHg7Cn0KCi5yZWZyZXNoIHsKICBmbG9hdDogcmlnaHQ7CiAgbWFyZ2luLXJpZ2h0OiA4cHg7CiAgbWFyZ2luLWxlZnQ6IDEyMjBweDsKICBtYXJnaW4tYm90dG9tOiAwcHg7Cn0KCi5pbnB1dCB7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICBmbGV4LWRpcmVjdGlvbjogcm93Owp9Cgo="},{"version":3,"sources":["Bots.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Bots.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"bots\">\n    <h2>Bots</h2>\n     <label class=\"refresh\">\n      <b-button variant=\"outline-primary\" @click=\"getBots\">Refresh</b-button>\n    </label>\n    <div class=\"table\">\n      <b-table striped hover bordered :items=\"bots\" :fields=\"fields\">\n        <template #cell(actions)=\"row\">\n          <b-button size=\"sm\" variant=\"outline-primary\" @click=\"deleteBot(row.item.name)\">\n            <b-icon-trash />\n          </b-button>\n          <b-button v-b-modal.edit-modal size=\"sm\" @click=\"handleModal(row.item)\" variant=\"outline-primary\" class=\"actionButton\">\n            <b-icon-pencil />\n          </b-button>\n        </template>\n      </b-table>\n    </div>\n    <b-modal id=\"edit-modal\" title=\"Edit Bot\" @ok=\"editBot(modalName, newFields)\" class=\"actionButton\">\n      <h5>Name: {{modalName}}</h5>\n      <label>\n        Subreddit: r/ \n        <input type=\"text\" v-model=\"newFields.subreddit\" class=\"input\">\n        (Previously: {{modalSub}})\n      </label>\n      <!-- <b-form-group class=\"checkbox\">\n        <b-form-checkbox v-model=\"newHateSpeech\" class=\"check\">\n          Detect Hate Speech\n        </b-form-checkbox>\n        <b-form-checkbox v-model=\"newFakeNews\" class=\"check\">\n          Detect Fake News\n        </b-form-checkbox>\n      </b-form-group> -->\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { ref } from '@vue/composition-api';\nimport axios from 'axios';\n\nexport default {\n  name: 'Bots',\n  setup() {\n    const bots = ref([]);\n    const modalInfo= ref([]);\n    const modalSub = ref('');\n    const modalName = ref('');\n    const fields = ref([]);\n    const newFields = ref([]);\n    // const newFakeNews = ref(false);\n    // const newHateSpeech = ref(false);\n\n    fields.value = [\n      {\n        key: 'name',\n        label: 'Bot name',\n        sortable: true\n      },\n      {\n        key: 'subreddit',\n        sortable: true\n      },\n      {\n        key: 'actions',\n        label: 'Actions',\n        sortable: false,\n        thClass: 'actions-col',\n        tdClass: 'actions-col'\n      }\n    ];\n\n    async function getBots() {\n      const response = await axios.get('http://localhost:4000/getAll');\n\n      bots.value = [];\n      response.data.forEach(bot => {\n        bots.value.push({\n          name: bot.name,\n          subreddit: bot.subreddit,\n          fakeNews: bot.fakeNews,\n          hateSpeech: bot.hateSpeech\n        });\n      });\n\n      if (bots.value.length === 0) {\n        bots.value = [\n          {\n            name: 'No bots found',\n            subreddit: 'N/A',\n            fakeNews: true,\n            hateSpeech: false\n          }\n        ];\n      }\n    }\n\n    function deleteBot(botName) {\n      axios.delete('http://localhost:4000/deleteBot', {\n        data: { name: botName }\n      });\n\n      bots.value.splice(bots.value.findIndex(bot => bot.name === botName), 1);\n    }\n\n    function editBot(botName, newInfo) {\n      var formData = {\n        \"name\": botName,\n        \"newAttributes\": {\n          \"subreddit\": newInfo.subreddit,\n          \"hateSpeech\": true,\n          \"fakeNews\": false\n        }\n      }\n      console.log(axios.put('http://localhost:4000/editBot', formData));\n      // this.$forceUpdate();\n\n            // {\"name\": \"test1\",\n            // \"newAttributes\": {\"fakeNews\": \"true\",\n            // \"hateSpeech\": \"true\",\n            // \"subreddit\": \"EDIT_TEST\"}}\n    }\n\n    function handleModal(bot) {\n      modalInfo.value = bot;\n      modalName.value = modalInfo.value.name;\n      modalSub.value = modalInfo.value.subreddit;\n    }\n\n    getBots();\n\n    return {\n      bots,\n      modalSub,\n      modalName,\n      modalInfo,\n      // newFakeNews,\n      // newHateSpeech,\n      fields,\n      newFields,\n      handleModal,\n      getBots,\n      deleteBot,\n      editBot,\n    };\n  }\n}\n</script>\n\n<style>\n.bots h2 {\n  font-weight: bold;\n}\n\n.bots {\n  display: flex;\n  flex-direction: column;\n  padding: 50px;\n  align-items: center;\n  justify-content: center;\n}\n\n.table {\n  width: 1000px;\n  margin-top: 10px;\n}\n\n.actions-col {\n  width: 10%;\n}\n\n.actionButton {\n  margin: 4px;\n}\n\n.refresh {\n  float: right;\n  margin-right: 8px;\n  margin-left: 1220px;\n  margin-bottom: 0px;\n}\n\n.input {\n  align-items: center;\n  justify-content: center;\n  flex-direction: row;\n}\n\n</style>\n"]}]}